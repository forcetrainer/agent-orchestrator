<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>10</epicId>
    <storyId>10.0</storyId>
    <title>Directory Unification &amp; Architecture Foundation</title>
    <status>Ready for Implementation</status>
    <generatedAt>2025-10-12</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/bryan.inagaki/Documents/development/agent-orchestrator/docs/stories/story-10.0.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>to consolidate session folders and conversation persistence into a unified structure</iWant>
    <soThat>all conversation artifacts (messages, outputs, files) are stored together in one location</soThat>
    <tasks>
      - Directory Structure Migration (rename data/agent-outputs → data/conversations)
      - Type System Unification (create PersistedConversation type)
      - Path Validation Security Updates (allow data/conversations/, block old path)
      - Environment Configuration (update OUTPUT_PATH)
      - Session Creation Updates (use new path structure)
      - Migration Script (create scripts/migrate-sessions.js)
      - Testing &amp; Verification (all tests pass)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1">
      <title>Directory Structure Migration</title>
      <details>
        - Rename data/agent-outputs/ → data/conversations/
        - All existing session folders migrated without data loss
        - File structure remains intact (no files corrupted or lost)
        - Git history preserved (use git mv for rename)
      </details>
    </criterion>
    <criterion id="AC2">
      <title>Type System Unification</title>
      <details>
        - Create unified PersistedConversation type that merges Conversation + SessionManifest
        - Add browserId: string field for Epic 10 browser tracking
        - Add folderPath: string field for conversation folder reference
        - Use ISO 8601 strings for all date fields (serialization-safe)
      </details>
    </criterion>
    <criterion id="AC3">
      <title>Path Validation Security Updates</title>
      <details>
        - Update lib/pathResolver.ts → validateWritePath() to allow data/conversations/
        - Block writes to old data/agent-outputs/ path (deprecated)
        - All security tests pass with new path rules
        - No regressions in path traversal protection
      </details>
    </criterion>
    <criterion id="AC4">
      <title>Environment Configuration</title>
      <details>
        - Update lib/utils/env.ts → OUTPUT_PATH constant to data/conversations
        - Update all references to agent-outputs in codebase
        - Environment variables remain backward compatible
      </details>
    </criterion>
    <criterion id="AC5">
      <title>Session Creation Updates</title>
      <details>
        - Update lib/sessions/chatSessions.ts → createChatSession() to use new path
        - Enforce conversationId === sessionId in new sessions
        - Create both conversation.json and manifest.json initially (migration phase)
        - Later merge into single conversation.json (Story 10.1)
      </details>
    </criterion>
    <criterion id="AC6">
      <title>Migration Script</title>
      <details>
        - Create scripts/migrate-sessions.js script
        - Copy all folders from data/agent-outputs/ → data/conversations/
        - Validate all manifest.json files are readable
        - Create initial conversation.json stubs (empty messages array)
        - Verify file integrity (checksums)
        - Generate migration report (success/failure counts)
        - Migration script is idempotent (safe to run multiple times)
        - Dry-run mode available for testing
      </details>
    </criterion>
    <criterion id="AC7">
      <title>Testing &amp; Verification</title>
      <details>
        - All existing unit tests pass
        - All existing integration tests pass
        - New path validation tests added
        - Manual verification: Create new session, verify files appear in correct location
        - Manual verification: Load existing session, verify backward compatibility
      </details>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/docs/epic-10.md</path>
        <title>Epic 10: Conversation Persistence &amp; Multi-Session Management</title>
        <section>Story 10.0: Directory Unification &amp; Architecture Foundation</section>
        <snippet>
          Story 10.0 establishes the foundational architecture by consolidating session folders and
          conversation persistence into a unified structure. This eliminates fragmentation where
          conversation data would be in one place and session outputs in another. The unified approach
          uses conversationId === sessionId (1:1 relationship) with everything stored under
          data/conversations/{conversationId}/.
        </snippet>
      </doc>
      <doc>
        <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/docs/tech-spec-epic-10.md</path>
        <title>Technical Specification: Epic 10</title>
        <section>Story 10.0 - Directory Unification (AC-10.0-1 through AC-10.0-7)</section>
        <snippet>
          Defines acceptance criteria for directory unification including path validation security,
          type system consolidation, and migration requirements. Specifies that conversationId === sessionId
          must be enforced as a 1:1 relationship throughout the system.
        </snippet>
      </doc>
      <doc>
        <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/docs/prd.md</path>
        <title>Product Requirements Document</title>
        <section>Session Management (Basic) - FR-11, FR-12</section>
        <snippet>
          Epic 10 extends basic session management with persistence capabilities. Current in-memory
          conversations need disk persistence to survive server restarts.
        </snippet>
      </doc>
    </docs>

    <code>
      <file>
        <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/lib/utils/env.ts</path>
        <kind>module</kind>
        <symbol>OUTPUT_PATH</symbol>
        <lines>66-69</lines>
        <reason>
          Currently points to './data/agent-outputs' (line 67). Must be updated to './data/conversations'
          for Story 10.0 AC4. This is the central configuration point that all file operations depend on.
        </reason>
        <currentImplementation>
          get OUTPUT_PATH(): string {
            const relativePath = process.env.OUTPUT_PATH || './data/agent-outputs';
            return resolve(this.PROJECT_ROOT, relativePath);
          }
        </currentImplementation>
      </file>

      <file>
        <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/lib/pathResolver.ts</path>
        <kind>module</kind>
        <symbol>validateWritePath</symbol>
        <lines>100-140</lines>
        <reason>
          Security function that blocks writes outside agent-outputs directory (line 106).
          Must be updated to allow data/conversations/ instead (AC3). Critical security control
          that prevents path traversal attacks.
        </reason>
        <currentImplementation>
          const agentOutputsPath = resolve(projectRoot, 'data/agent-outputs');

          // Check if path is within /data/agent-outputs/
          const isInAgentOutputs =
            normalizedPath.startsWith(agentOutputsPath + sep) ||
            normalizedPath === agentOutputsPath;
        </currentImplementation>
      </file>

      <file>
        <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/lib/sessions/chatSessions.ts</path>
        <kind>module</kind>
        <symbol>createChatSession</symbol>
        <lines>27-80</lines>
        <reason>
          Creates session manifests in data/agent-outputs folder (line 39). Must be updated
          to use new conversations path (AC5). This is where new sessions are created and
          where conversationId === sessionId relationship should be enforced.
        </reason>
        <currentImplementation>
          const agentOutputsFolder = resolve(env.PROJECT_ROOT, 'data/agent-outputs');
          const sessionFolder = join(agentOutputsFolder, sessionId);
        </currentImplementation>
      </file>

      <file>
        <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/types/index.ts</path>
        <kind>types</kind>
        <symbol>Conversation</symbol>
        <lines>95-112</lines>
        <reason>
          Current Conversation interface needs to be merged with SessionManifest to create
          PersistedConversation type (AC2). Should add browserId, folderPath fields and
          use ISO date strings instead of Date objects.
        </reason>
        <currentImplementation>
          export interface Conversation {
            id: string;
            agentId: string;
            messages: Message[];
            createdAt: Date;
            updatedAt: Date;
            sessionId?: string;
            sessionFolder?: string;
            cachedContext?: CachedContext;
          }
        </currentImplementation>
      </file>

      <file>
        <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/lib/agents/sessionDiscovery.ts</path>
        <kind>module</kind>
        <symbol>SessionManifest</symbol>
        <lines>N/A</lines>
        <reason>
          SessionManifest type defines session metadata structure used in manifest.json files.
          This type should be merged with Conversation to create unified PersistedConversation (AC2).
          Reference for fields: version, session_id, agent, workflow, execution, outputs, userSummary, messageCount.
        </reason>
      </file>
    </code>

    <dependencies>
      <node>
        <package name="uuid" version="^13.0.0">Used for sessionId generation (randomUUID)</package>
        <package name="next" version="14.2.0">Framework providing path utilities</package>
        <package name="typescript" version="^5">Type system for PersistedConversation interface</package>
        <package name="@types/node" version="^20">Node.js types for fs operations in migration script</package>
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>
      <title>1:1 Relationship Enforcement</title>
      <description>
        conversationId MUST equal sessionId throughout the system. This is a foundational
        architectural constraint that eliminates the need for separate tracking mechanisms.
        Any code that creates sessions or conversations must enforce this relationship.
      </description>
    </constraint>

    <constraint>
      <title>Backward Compatibility During Migration</title>
      <description>
        The migration must preserve all existing session data without corruption or loss.
        Use copy operations (not move) initially, validate integrity, then remove old directory.
        Migration script must be idempotent to allow reruns if issues are discovered.
      </description>
    </constraint>

    <constraint>
      <title>Security - Path Validation</title>
      <description>
        Path validation security layer must be updated atomically with directory rename.
        No window should exist where writes to old path are blocked before migration completes.
        All security tests must pass with new path rules before deployment.
      </description>
    </constraint>

    <constraint>
      <title>Type Safety - Serialization</title>
      <description>
        PersistedConversation must use ISO 8601 date strings (not Date objects) to ensure
        safe JSON serialization/deserialization. This prevents data corruption when saving
        to disk in Story 10.1.
      </description>
    </constraint>

    <constraint>
      <title>Git History Preservation</title>
      <description>
        Use 'git mv' command for directory rename to preserve git history. This maintains
        traceability of changes and allows git blame to work correctly across the rename.
      </description>
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>env.OUTPUT_PATH</name>
      <kind>property getter</kind>
      <signature>get OUTPUT_PATH(): string</signature>
      <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/lib/utils/env.ts:66-69</path>
      <purpose>
        Returns absolute path to output directory. Currently returns data/agent-outputs,
        must be updated to return data/conversations. All file writing operations use this.
      </purpose>
    </interface>

    <interface>
      <name>validateWritePath</name>
      <kind>function</kind>
      <signature>function validateWritePath(resolvedPath: string, context: PathContext): void</signature>
      <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/lib/pathResolver.ts:100-140</path>
      <purpose>
        Security validation for write operations. Throws error if path is outside allowed directory.
        Must be updated to allow data/conversations/ instead of data/agent-outputs/.
      </purpose>
    </interface>

    <interface>
      <name>createChatSession</name>
      <kind>async function</kind>
      <signature>async function createChatSession(agentId: string, agentTitle: string, firstUserMessage: string, userName?: string): Promise&lt;{ sessionId: string; sessionFolder: string }&gt;</signature>
      <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/lib/sessions/chatSessions.ts:27-80</path>
      <purpose>
        Creates new chat session with manifest. Must use new conversations path and enforce
        conversationId === sessionId relationship. Returns sessionId and sessionFolder path.
      </purpose>
    </interface>

    <interface>
      <name>PersistedConversation (NEW)</name>
      <kind>type definition</kind>
      <signature>
        export interface PersistedConversation {
          id: string;
          browserId: string;
          agentId: string;
          agentTitle: string;
          agentBundle: string;
          messages: SerializedMessage[];
          userSummary: string;
          messageCount: number;
          displayName: string;
          displayTimestamp: string;
          folderPath: string;
          createdAt: string;
          updatedAt: string;
          status: 'running' | 'completed';
          user: string;
        }
      </signature>
      <path>/Users/bryan.inagaki/Documents/development/agent-orchestrator/types/index.ts (to be added)</path>
      <purpose>
        Unified type that merges Conversation and SessionManifest. Uses ISO 8601 date strings
        for safe serialization. Foundation for Story 10.1 persistence layer.
      </purpose>
    </interface>
  </interfaces>

  <tests>
    <standards>
      The project uses Jest for unit testing with TypeScript support via ts-jest. Tests are
      located in __tests__ directories alongside source files. Security-critical code like
      path validation has dedicated test suites (lib/__tests__/pathResolver.security.test.ts).
      Story 10.0 requires updates to security tests to validate new path rules while maintaining
      existing path traversal protection.
    </standards>

    <locations>
      - lib/__tests__/pathResolver.security.test.ts (path validation tests)
      - lib/files/__tests__/security.test.ts (file operation security)
      - lib/sessions/__tests__/ (session creation tests - may need creation)
      - scripts/__tests__/migrate-sessions.test.ts (NEW - migration script tests)
    </locations>

    <ideas>
      <testIdea ac="AC1">
        Test: Migration script dry-run mode
        - Run migration script with --dry-run flag
        - Verify no files are actually moved/copied
        - Verify report shows expected session count
      </testIdea>

      <testIdea ac="AC1">
        Test: Migration preserves file integrity
        - Create test sessions with known content
        - Run migration script
        - Verify all files exist in new location
        - Verify checksums match original files
      </testIdea>

      <testIdea ac="AC2">
        Test: PersistedConversation type serialization
        - Create PersistedConversation instance with dates
        - Serialize to JSON
        - Deserialize back
        - Verify dates are ISO 8601 strings and parse correctly
      </testIdea>

      <testIdea ac="AC3">
        Test: Path validation allows conversations path
        - Call validateWritePath with data/conversations/test/file.txt
        - Verify no error thrown
      </testIdea>

      <testIdea ac="AC3">
        Test: Path validation blocks old agent-outputs path
        - Call validateWritePath with data/agent-outputs/test/file.txt
        - Verify SecurityError thrown with clear message
      </testIdea>

      <testIdea ac="AC4">
        Test: OUTPUT_PATH returns new path
        - Read env.OUTPUT_PATH
        - Verify it resolves to absolute path ending in data/conversations
      </testIdea>

      <testIdea ac="AC5">
        Test: createChatSession enforces conversationId === sessionId
        - Call createChatSession
        - Verify returned sessionId matches folder name
        - Verify conversationId would match sessionId (1:1 relationship)
      </testIdea>

      <testIdea ac="AC6">
        Test: Migration script is idempotent
        - Run migration script once
        - Run migration script again
        - Verify second run skips already-migrated sessions
        - Verify no duplicate files created
      </testIdea>

      <testIdea ac="AC7">
        Integration test: End-to-end new session creation
        - Create new chat session via API
        - Verify folder created in data/conversations/
        - Verify manifest.json and conversation.json exist
        - Verify no files created in old agent-outputs/ path
      </testIdea>
    </ideas>
  </tests>
</story-context>
