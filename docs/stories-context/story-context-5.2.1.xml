<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>5</epicId>
    <storyId>5.2.1</storyId>
    <title>Session Metadata Display Enhancement</title>
    <status>Ready for Development</status>
    <generatedAt>2025-10-06</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/bryan.inagaki/Documents/development/agent-orchestrator/docs/stories/story-5.2.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>end user</asA>
    <iWant>to see human-readable session names instead of UUIDs</iWant>
    <soThat>I can easily identify which agent created which outputs</soThat>
    <tasks>- Task 1: Create SessionMetadata interface and manifestReader utility (AC: 1, 7)
  - Define SessionMetadata TypeScript interface matching Story 5.0 manifest schema
  - Create `lib/files/manifestReader.ts` module
  - Implement `parseManifest(sessionPath: string): SessionMetadata | null` function
  - Implement `generateDisplayName(metadata: SessionMetadata): string` function
  - Handle missing or malformed manifest.json gracefully (return null)
  - Add date formatting utility for human-readable timestamps
  - Write unit tests for manifest parsing and display name generation

- Task 2: Extend FileTreeNode interface (AC: 1, 4)
  - Add `displayName?: string` field to FileTreeNode interface
  - Add `metadata?: SessionMetadata` field to FileTreeNode interface
  - Add `isInternal?: boolean` field to FileTreeNode interface
  - Update FileTreeNode type exports in appropriate type definition file
  - Ensure backward compatibility (all fields optional)

- Task 3: Update tree builder to load manifests (AC: 1, 2, 5, 7)
  - Modify `lib/files/treeBuilder.ts` to detect session folders (UUID pattern)
  - For each session folder, attempt to load manifest.json using manifestReader
  - If manifest exists, set `displayName` using `generateDisplayName()`
  - If manifest exists, attach metadata to FileTreeNode
  - Mark manifest.json files as `isInternal: true` to hide from tree
  - Handle "running" status sessions (show "In Progress" in display name)
  - Fallback to UUID name if manifest.json missing or invalid
  - Write unit tests for tree builder with manifest loading

- Task 4: Update DirectoryTree component to render display names (AC: 1, 3)
  - Modify `components/DirectoryTree.tsx` to render `node.displayName || node.name`
  - Filter out nodes where `isInternal === true` from rendering
  - Add hover tooltip or metadata panel showing full session details
  - Ensure selected file highlighting still works with display names
  - Update component tests to verify displayName rendering

- Task 5: Add session metadata display (AC: 3)
  - Create metadata panel or tooltip component for session details
  - Display agent name, title, workflow description
  - Display execution timestamps (started, completed)
  - Display execution status (running, completed, failed)
  - Display user who initiated the session
  - Style metadata display clearly but non-intrusively

- Task 6: Update API endpoint to include metadata (AC: 1, 2)
  - Modify `app/api/files/tree/route.ts` to use enhanced tree builder
  - Verify response includes displayName and metadata fields
  - Ensure technical paths (UUIDs) still present in `path` and `name` fields
  - Add integration tests for API with metadata-enhanced response

- Task 7: Write comprehensive tests (Testing Requirements)
  - Unit tests: manifestReader parsing valid and invalid manifests
  - Unit tests: Display name generation for various metadata scenarios
  - Unit tests: Tree builder with session folders (with and without manifests)
  - Unit tests: File filtering (manifest.json excluded from tree)
  - Component tests: DirectoryTree renders displayName correctly
  - Component tests: Internal files hidden from display
  - Integration tests: Full tree API â†’ component flow with metadata
  - Edge case tests: Malformed manifest, missing fields, future status values

- Task 8: Update documentation (AC: all)
  - Update tech-spec-epic-5.md with SessionMetadata interface (already done)
  - Update tech-spec-epic-5.md Services table with ManifestReader (already done)
  - Add usage examples to manifestReader.ts JSDoc comments
  - Document display name format convention in SESSION-OUTPUT-SPEC.md</tasks>
  </story>

  <acceptanceCriteria>1. Session folders display as "{Agent Title} - {Workflow Name} ({Date})" instead of UUID
2. manifest.json files hidden from directory tree (internal metadata only)
3. Clicking session folder shows agent metadata (agent name, workflow, user, timestamps)
4. Internal technical paths (UUIDs) still used for file operations and security validation
5. Empty sessions (no outputs yet) show as "Agent Name - Workflow (In Progress)"
6. Display names update when manifest.json is modified
7. Sessions without manifest.json fall back to showing UUID (graceful degradation)</acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document - FR-8 File Viewer</title>
        <section>Functional Requirements - FR-8</section>
        <snippet>Simple file browser for output directory only. Directory traversal to navigate multiple folders created by agents. Human-readable session names derived from agent metadata (hides technical UUIDs). Internal metadata files (manifest.json) hidden from user view but used for navigation enhancement. Display file contents in browser with basic formatting.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-5.md</path>
        <title>Technical Specification: File Management and Viewer - Story 5.0</title>
        <section>Story 5.0: Session-Based Output Management</section>
        <snippet>Session folders at /data/agent-outputs/{uuid}/ with manifest.json schema v1.0.0. Manifest contains agent metadata (name, title, bundle), workflow details, execution status, and outputs array. Enables cross-agent discovery and human navigation.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-5.md</path>
        <title>Technical Specification - Data Models and Contracts</title>
        <section>Data Models - FileTreeNode, SessionMetadata</section>
        <snippet>FileTreeNode interface extended with displayName (human-readable name for UI display), metadata (SessionMetadata from manifest.json), isInternal (hide from UI). SessionMetadata includes agent {name, title, bundle}, workflow {name, description}, execution {started_at, completed_at, status, user}, outputs array.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-5.0.md</path>
        <title>Story 5.0: Session-Based Output Management</title>
        <section>Manifest Schema and Implementation</section>
        <snippet>manifest.json created on workflow start with status: "running", finalized on completion with completed_at and final status. UUID v4 session folders prevent collision. Path validator enforces writes ONLY to /data/agent-outputs/.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-5.2.md</path>
        <title>Story 5.2: Display Directory Tree Structure</title>
        <section>Implementation and Architecture</section>
        <snippet>Custom tree implementation using Tailwind CSS + React. DirectoryTree component renders FileTreeNode hierarchy with expand/collapse. Story 5.2 provides basic tree with raw names (UUIDs), Story 5.2.1 adds metadata-enhanced display layer without breaking changes.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>lib/files/treeBuilder.ts</path>
        <kind>module</kind>
        <symbol>buildDirectoryTree</symbol>
        <lines>37-87</lines>
        <reason>Recursive tree builder that creates FileTreeNode hierarchy from file system. Story 5.2.1 will extend this to detect session folders (UUID pattern), load manifest.json, and populate displayName and metadata fields.</reason>
      </artifact>
      <artifact>
        <path>components/DirectoryTree.tsx</path>
        <kind>component</kind>
        <symbol>DirectoryTree, TreeNode</symbol>
        <lines>1-209</lines>
        <reason>React component rendering file tree with expand/collapse. Story 5.2.1 will modify TreeNode to render node.displayName || node.name and filter out nodes with isInternal=true (manifest.json files).</reason>
      </artifact>
      <artifact>
        <path>lib/agents/sessionDiscovery.ts</path>
        <kind>module</kind>
        <symbol>SessionManifest</symbol>
        <lines>20-47</lines>
        <reason>SessionManifest interface defines manifest.json schema v1.0.0 with agent, workflow, execution metadata. Story 5.2.1 manifestReader will parse this structure and extract display name components.</reason>
      </artifact>
      <artifact>
        <path>components/FileViewerPanel.tsx</path>
        <kind>component</kind>
        <symbol>FileTreeNode, FileViewerPanel</symbol>
        <lines>23-30, 51-80</lines>
        <reason>FileTreeNode interface (lines 23-30) will be extended with displayName?, metadata?, isInternal? fields per Story 5.2.1 tech spec. FileViewerPanel calls tree API and renders DirectoryTree.</reason>
      </artifact>
      <artifact>
        <path>app/api/files/tree/route.ts</path>
        <kind>api</kind>
        <symbol>GET</symbol>
        <lines>*</lines>
        <reason>API endpoint serving directory tree structure. Story 5.2.1 will modify to use enhanced tree builder with manifest loading and return displayName/metadata fields in response.</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="react" version="^18" usage="UI framework for DirectoryTree component rendering" />
        <package name="next" version="14.2.0" usage="API routes for /api/files/tree endpoint" />
        <package name="uuid" version="^10.0.0" usage="UUID pattern detection for session folders (validation against v4 format)" />
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="1">Enhancement Layer (Not Replacement): Story 5.2 implementation remains unchanged. Technical paths (UUIDs) still used for all file operations and security validation. Display layer sits on top of existing tree structure (presentation concern).</constraint>
    <constraint id="2">Reuse from Story 5.0: manifest.json schema defined in Story 5.0 (Session-Based Output Management). Session folder structure: /data/agent-outputs/{uuid}/manifest.json. No changes to manifest generation - purely consumption for display.</constraint>
    <constraint id="3">Graceful Degradation: Sessions without manifest.json (legacy or corrupted) fall back to UUID display. Malformed manifest.json logged as warning but doesn't break tree rendering. Missing metadata fields handled with sensible defaults.</constraint>
    <constraint id="4">Display Name Format: "{agent.title} - {workflow.name} ({formatted_date})" Examples: "Alex the Facilitator - Intake ITSM (Oct 6, 2025 5:09 PM)", "Pixel - Build Stories (Oct 6, 2025 9:15 AM - In Progress)"</constraint>
    <constraint id="5">Testing Standards: Unit tests for manifestReader (parse valid/invalid manifests, generate display names). Unit tests for tree builder with manifest loading. Component tests for DirectoryTree with displayName rendering and internal file filtering. Integration tests for full API â†’ component flow.</constraint>
  </constraints>

  <interfaces>
    <interface name="SessionMetadata" path="Story 5.2.1 Tech Spec">
      <signature>
interface SessionMetadata {
  session_id: string;
  agent: {
    name: string;
    title: string;
    bundle: string;
  };
  workflow: {
    name: string;
    description: string;
  };
  execution: {
    started_at: string;      // ISO 8601
    completed_at?: string;   // ISO 8601
    status: 'running' | 'completed' | 'failed';
    user: string;
  };
  outputs?: Array&lt;{
    file: string;
    type: string;
    description: string;
    created_at: string;
  }&gt;;
}
      </signature>
    </interface>
    <interface name="FileTreeNode (Extended)" path="Story 5.2.1 Tech Spec">
      <signature>
interface FileTreeNode {
  name: string;              // Technical name (UUID for sessions)
  path: string;              // Technical path
  type: 'file' | 'directory';
  children?: FileTreeNode[];
  size?: number;
  modified?: string;
  displayName?: string;      // NEW - human-readable name
  metadata?: SessionMetadata; // NEW - session metadata
  isInternal?: boolean;      // NEW - hide from UI
}
      </signature>
    </interface>
    <interface name="manifestReader API" path="lib/files/manifestReader.ts (to be created)">
      <signature>
// Parse manifest.json from session folder
function parseManifest(sessionPath: string): SessionMetadata | null

// Generate human-readable display name from metadata
function generateDisplayName(metadata: SessionMetadata): string

// Helper: Format ISO 8601 timestamp to readable format
function formatTimestamp(isoString: string): string
      </signature>
    </interface>
  </interfaces>

  <tests>
    <standards>Jest 30.2.0 for unit tests, React Testing Library 16.3.0 for component tests, integration tests for full API â†’ component flow. Test files in __tests__/ subdirectories with .test.ts suffix. Coverage target: 80%+ for new code.</standards>
    <locations>
      <location>lib/files/__tests__/manifestReader.test.ts (NEW - unit tests for manifest parsing and display name generation)</location>
      <location>lib/files/__tests__/treeBuilder.test.ts (MODIFY - add tests for manifest loading in tree builder)</location>
      <location>components/__tests__/DirectoryTree.test.tsx (MODIFY - add tests for displayName rendering and internal file filtering)</location>
      <location>app/api/files/tree/__tests__/route.test.ts (MODIFY - add tests for metadata in API response)</location>
    </locations>
    <ideas>
      <idea ac="1,7">Unit test: manifestReader.parseManifest() with valid manifest.json returns SessionMetadata object with correct agent, workflow, execution fields</idea>
      <idea ac="1,7">Unit test: manifestReader.parseManifest() with invalid JSON returns null and logs warning (graceful degradation)</idea>
      <idea ac="1,5">Unit test: generateDisplayName() with status="running" returns "{Agent} - {Workflow} (In Progress)"</idea>
      <idea ac="1,5">Unit test: generateDisplayName() with status="completed" returns "{Agent} - {Workflow} ({Date})"</idea>
      <idea ac="1">Unit test: formatTimestamp() converts ISO 8601 to human-readable format (e.g., "Oct 6, 2025 5:09 PM")</idea>
      <idea ac="1,2,7">Unit test: Tree builder detects UUID session folder, loads manifest, sets displayName field</idea>
      <idea ac="7">Unit test: Tree builder with missing manifest.json falls back to UUID name (graceful degradation)</idea>
      <idea ac="2">Unit test: Tree builder marks manifest.json files with isInternal=true</idea>
      <idea ac="1">Component test: DirectoryTree renders node.displayName when present, falls back to node.name when absent</idea>
      <idea ac="2">Component test: DirectoryTree filters out nodes with isInternal=true from rendering</idea>
      <idea ac="3">Component test: DirectoryTree shows metadata panel/tooltip when clicking session folder</idea>
      <idea ac="1,2">Integration test: GET /api/files/tree returns tree with displayName and metadata fields for session folders</idea>
      <idea ac="7">Edge case test: Empty manifest.json file doesn't crash tree builder (returns null, falls back to UUID)</idea>
      <idea ac="7">Edge case test: Manifest with missing required fields (agent, workflow) handled gracefully</idea>
    </ideas>
  </tests>
</story-context>
