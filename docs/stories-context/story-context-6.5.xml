<?xml version="1.0" encoding="UTF-8"?>
<!-- Story Context for Story 6.5: Context-Aware File Naming Validation -->
<!-- Generated: 2025-10-08 -->
<!-- Epic: 6 - Enhanced UX & Interactive Features -->

<story-context version="2.0">
  <story>
    <id>6.5</id>
    <title>Context-Aware File Naming Validation</title>
    <epic>6</epic>
    <status>Draft</status>

    <user-story>
      <as-a>agent builder</as-a>
      <i-want>agents to use descriptive file names</i-want>
      <so-that>users can identify files without opening them</so-that>
    </user-story>

    <acceptance-criteria>
      <criterion id="1">Backend validates filenames in `write_file()` tool call</criterion>
      <criterion id="2">Generic patterns rejected: `output.md`, `output-2.md`, `result.txt`, `file.txt`, `untitled.md`</criterion>
      <criterion id="3">Error message returned to agent: "Generic filename not allowed. Use descriptive name (e.g., 'procurement-request.md')"</criterion>
      <criterion id="4">System prompt updated with filename guidelines (examples of good/bad names)</criterion>
      <criterion id="5">Validation allows descriptive names: `procurement-request.md`, `budget-analysis-q3.csv`, `approval-checklist.md`</criterion>
      <criterion id="6">Path traversal prevention (no `../`, special chars)</criterion>
      <criterion id="7">Filename sanitization (kebab-case recommended but not enforced)</criterion>
    </acceptance-criteria>

    <tasks>
      <task id="1" acceptance-criteria="1,2,5,6,7">
        <description>Implement filename validation utility</description>
        <subtasks>
          <subtask>Create `lib/files/filenameValidator.ts` module</subtask>
          <subtask>Define regex patterns for generic filenames</subtask>
          <subtask>Implement `validateFilename(filename: string)` function</subtask>
          <subtask>Check against generic patterns - throw error with helpful message if matched</subtask>
          <subtask>Check for path traversal (`../`, `/`, `\`) - throw error if found</subtask>
          <subtask>Check for special characters (`&lt;&gt;:"|?*`) - throw error with list of invalid chars</subtask>
          <subtask>Allow descriptive names (any string not matching generic patterns or security issues)</subtask>
          <subtask>Write unit tests covering all validation rules and edge cases</subtask>
        </subtasks>
      </task>

      <task id="2" acceptance-criteria="1,3">
        <description>Integrate validation into write_file tool</description>
        <subtasks>
          <subtask>Modify `lib/tools/fileOperations.ts` -&gt; `write_file` function</subtask>
          <subtask>Call `validateFilename()` before writing file</subtask>
          <subtask>Catch validation errors and format as tool error response</subtask>
          <subtask>Ensure error message is returned to OpenAI (agent sees it and can retry)</subtask>
          <subtask>Write integration tests for write_file with invalid filenames</subtask>
        </subtasks>
      </task>

      <task id="3" acceptance-criteria="4">
        <description>Update system prompt with filename guidelines</description>
        <subtasks>
          <subtask>Modify `lib/agents/systemPromptBuilder.ts`</subtask>
          <subtask>Add FILE_NAMING_GUIDELINES constant with rules and examples</subtask>
          <subtask>Include in system prompt for all agents</subtask>
          <subtask>Test that agents receive and follow guidelines in practice</subtask>
        </subtasks>
      </task>

      <task id="4" acceptance-criteria="3">
        <description>Add descriptive error messages</description>
        <subtasks>
          <subtask>Ensure each validation error provides helpful guidance</subtask>
          <subtask>Generic filename error: Show examples of good alternatives</subtask>
          <subtask>Path traversal error: Explain filename cannot contain path separators</subtask>
          <subtask>Special chars error: List which characters are not allowed</subtask>
        </subtasks>
      </task>

      <task id="5" acceptance-criteria="1,2,3,4,5,6,7">
        <description>Testing and validation</description>
        <subtasks>
          <subtask>Unit tests for validateFilename() covering all patterns</subtask>
          <subtask>Integration tests for write_file with validation</subtask>
          <subtask>E2E test: Agent tries generic filename → receives error → retries with descriptive name</subtask>
          <subtask>Test that descriptive names pass validation</subtask>
          <subtask>Test path traversal prevention (security)</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-6.md</path>
        <title>Epic 6 Technical Specification</title>
        <section>3. Context-Aware File Naming (Story 6.5)</section>
        <snippet>
**Validation Logic:**

```typescript
const GENERIC_PATTERNS = [
  /^output(-\d+)?\.md$/i,
  /^result(-\d+)?\.txt$/i,
  /^file\d*\./i,
  /^untitled/i,
  /^document\d*\./i
];

export function validateFilename(filename: string): void {
  // Check for generic patterns
  if (GENERIC_PATTERNS.some(pattern => pattern.test(filename))) {
    throw new Error(
      `Generic filename "${filename}" not allowed. ` +
      `Use descriptive names based on content or purpose.\n\n` +
      `Examples:\n` +
      `  ✅ procurement-request.md\n` +
      `  ✅ budget-analysis-q3.csv\n` +
      `  ✅ approval-checklist.md\n\n` +
      `  ❌ output.md\n` +
      `  ❌ result.txt\n` +
      `  ❌ file-1.md`
    );
  }

  // Path traversal prevention
  if (filename.includes('..') || filename.includes('/') || filename.includes('\\')) {
    throw new Error('Filename cannot contain path separators or ".."');
  }

  // Special character check
  if (/[<>:"|?*]/.test(filename)) {
    throw new Error('Filename contains invalid characters: &lt; &gt; : " | ? *');
  }
}
```

**System Prompt Addition:**

```typescript
const FILE_NAMING_GUIDELINES = `
CRITICAL: When writing files, use descriptive filenames based on content/purpose.

Rules:
- Use kebab-case (lowercase with hyphens)
- Include purpose or content type
- Add context if helpful (dates, departments, etc.)
- Keep under 50 characters
- Use standard extensions (.md, .csv, .txt, .json)

Examples:
✅ GOOD:
  - procurement-request.md (describes what it is)
  - budget-analysis-q3.csv (purpose + context)
  - approval-checklist.md (function-based)
  - software-license-quote.md

❌ BAD (will be rejected):
  - output.md (too generic)
  - file.txt (meaningless)
  - result-2.md (numbered generic)
  - untitled.md (lazy naming)
`;
```
        </snippet>
      </doc>

      <doc>
        <path>docs/epics.md</path>
        <title>Agent Orchestrator - Epic Breakdown</title>
        <section>Story 6.5: Context-Aware File Naming Validation</section>
        <snippet>
**As an** agent builder
**I want** agents to use descriptive file names
**So that** users can identify files without opening them

**Prerequisites:** Epic 4 complete (file operations exist)

**Acceptance Criteria:**
1. Backend validates filenames in `write_file()` tool call
2. Generic patterns rejected: `output.md`, `output-2.md`, `result.txt`, `file.txt`, `untitled.md`
3. Error message returned to agent: "Generic filename not allowed. Use descriptive name (e.g., 'procurement-request.md')"
4. System prompt updated with filename guidelines (examples of good/bad names)
5. Validation allows descriptive names: `procurement-request.md`, `budget-analysis-q3.csv`, `approval-checklist.md`
6. Path traversal prevention (no `../`, special chars)
7. Filename sanitization (kebab-case recommended but not enforced)

**Technical Notes:**
- Validation in `lib/files/operations.ts` → `validateFilename()`
- Regex patterns for generic names: `/^output(-\d+)?\.md$/`, `/^result\./`, `/^file\d*\./`
- Agent guidance added to system prompt in `lib/openai/client.ts`
- Keep validation simple (don't be too strict, just block obviously generic names)
        </snippet>
      </doc>
    </docs>

    <code>
      <file>
        <path>lib/tools/fileOperations.ts</path>
        <kind>module</kind>
        <symbol>executeSaveOutput</symbol>
        <lines>137-206</lines>
        <reason>This is the save_output tool function where filename validation needs to be integrated. Currently validates write path security but has no filename validation.</reason>
      </file>

      <file>
        <path>lib/agents/systemPromptBuilder.ts</path>
        <kind>module</kind>
        <symbol>buildSystemPrompt</symbol>
        <lines>93-190</lines>
        <reason>System prompt builder where FILE_NAMING_GUIDELINES constant and instructions need to be added per AC #4</reason>
      </file>

      <file>
        <path>lib/pathResolver.ts</path>
        <kind>module</kind>
        <symbol>validateWritePath</symbol>
        <lines>unknown</lines>
        <reason>Existing path validation logic that ensures writes are only to /data/agent-outputs - can reference for security pattern consistency</reason>
      </file>
    </code>

    <dependencies>
      <node>
        <package>@types/node</package>
        <version>^20.x</version>
        <reason>For fs/promises types used in file operations</reason>
      </node>
      <node>
        <package>typescript</package>
        <version>^5.x</version>
        <reason>TypeScript for type-safe validation implementation</reason>
      </node>
    </dependencies>
  </artifacts>

  <interfaces>
    <interface>
      <name>ToolResult</name>
      <kind>interface</kind>
      <signature>
interface ToolResult {
  success: boolean;
  path?: string;
  content?: string;
  size?: number;
  error?: string;
  [key: string]: any;
}
      </signature>
      <path>lib/tools/fileOperations.ts:24-37</path>
      <usage>Return format for all file operation tools including save_output - validation errors must return { success: false, error: "message" }</usage>
    </interface>

    <interface>
      <name>SaveOutputParams</name>
      <kind>interface</kind>
      <signature>
export interface SaveOutputParams {
  file_path: string;
  content: string;
}
      </signature>
      <path>lib/tools/fileOperations.ts:49-55</path>
      <usage>Input parameters for save_output tool - file_path is what needs filename validation before being resolved</usage>
    </interface>
  </interfaces>

  <constraints>
    <constraint>
      <type>architectural</type>
      <description>Validation must happen at tool level (before path resolution) to catch generic names early</description>
      <source>docs/tech-spec-epic-6.md - Section 3: Context-Aware File Naming</source>
    </constraint>

    <constraint>
      <type>security</type>
      <description>Path traversal prevention is security-critical and must block ../, /, and \ characters</description>
      <source>Story 6.5 AC #6</source>
    </constraint>

    <constraint>
      <type>pattern</type>
      <description>Error messages must be educational - guide agents to better naming with examples, not just reject</description>
      <source>docs/tech-spec-epic-6.md:619-630</source>
    </constraint>

    <constraint>
      <type>validation</type>
      <description>Validation should be permissive - only block obviously bad names. Don't enforce strict naming conventions like kebab-case.</description>
      <source>Story 6.5 AC #7</source>
    </constraint>

    <constraint>
      <type>integration</type>
      <description>System prompt must include FILE_NAMING_GUIDELINES so agents proactively use good names (not just react to errors)</description>
      <source>Story 6.5 AC #4</source>
    </constraint>
  </constraints>

  <tests>
    <standards>
Testing uses Jest framework. Unit tests in `__tests__` directories colocated with source. Integration tests verify tool behavior end-to-end. E2E tests simulate agent workflows using actual OpenAI API interactions.

Test coverage requirements:
- Unit tests: All validation logic (regex patterns, error messages, edge cases)
- Integration tests: save_output tool with validation integrated
- E2E tests: Agent workflow attempting generic filename, receiving error, retrying successfully
    </standards>

    <locations>
      <location>lib/files/__tests__/filenameValidator.test.ts</location>
      <location>lib/tools/__tests__/fileOperations.test.ts</location>
      <location>e2e/__tests__/file-naming.spec.ts</location>
    </locations>

    <ideas>
      <test-idea criteria="1,2">
        <description>Unit test: validateFilename() rejects all generic patterns</description>
        <approach>Test each regex pattern: output.md, output-1.md, result.txt, file.txt, untitled.md, document.pdf</approach>
      </test-idea>

      <test-idea criteria="5">
        <description>Unit test: validateFilename() allows descriptive names</description>
        <approach>Test examples from AC #5: procurement-request.md, budget-analysis-q3.csv, approval-checklist.md</approach>
      </test-idea>

      <test-idea criteria="6">
        <description>Unit test: Path traversal prevention</description>
        <approach>Test ../etc/passwd, ..\\windows\\system32, /absolute/path, file/../traversal.md - all should throw</approach>
      </test-idea>

      <test-idea criteria="6">
        <description>Unit test: Special character blocking</description>
        <approach>Test filenames with &lt;&gt;:"|?* characters - verify error lists invalid chars</approach>
      </test-idea>

      <test-idea criteria="3">
        <description>Integration test: save_output error message format</description>
        <approach>Call save_output with "output.md" - verify ToolResult has success: false, error contains examples</approach>
      </test-idea>

      <test-idea criteria="4">
        <description>Integration test: System prompt includes guidelines</description>
        <approach>Build system prompt for test agent - verify FILE_NAMING_GUIDELINES present with ✅/❌ examples</approach>
      </test-idea>

      <test-idea criteria="1,3,5">
        <description>E2E test: Agent workflow with filename validation</description>
        <approach>Agent attempts save_output with "output.md" → receives error with examples → retries with "procurement-request.md" → succeeds</approach>
      </test-idea>
    </ideas>
  </tests>

  <development-notes>
    <note type="implementation">
      <title>Validation Strategy</title>
      <content>
Adds validation layer to existing save_output tool without changing tool signature.
Validation happens BEFORE path resolution to catch generic names early.
Error messages are educational - show examples of good alternatives.
      </content>
    </note>

    <note type="security">
      <title>Path Traversal Prevention</title>
      <content>
Security-first validation order:
1. Path traversal check (../, /, \) - hard block
2. Special characters (&lt;&gt;:"|?*) - hard block
3. Generic patterns (output.md, result.txt) - block with helpful error
4. Allow everything else (permissive approach)
      </content>
    </note>

    <note type="ux">
      <title>Agent Guidance Philosophy</title>
      <content>
Two-pronged approach:
1. Proactive: System prompt includes FILE_NAMING_GUIDELINES so agents use good names from the start
2. Reactive: Validation errors provide examples so agents can self-correct

This reduces error/retry cycles and improves agent autonomy.
      </content>
    </note>

    <note type="architecture">
      <title>Module Organization</title>
      <content>
New file: lib/files/filenameValidator.ts
- Single responsibility: filename validation only
- Pure functions (no side effects)
- Easily testable in isolation
- Can be reused by other tools if needed

Modified files:
- lib/tools/fileOperations.ts (integrate validation into save_output)
- lib/agents/systemPromptBuilder.ts (add FILE_NAMING_GUIDELINES)
      </content>
    </note>
  </development-notes>

  <related-stories>
    <story>
      <id>4.5</id>
      <title>Refactor File Operation Tools for Agentic Loop</title>
      <relationship>Provides the save_output tool that this story enhances with validation</relationship>
    </story>

    <story>
      <id>5.0</id>
      <title>Session-Based Output Management</title>
      <relationship>Established /data/agent-outputs as the only writable location - validation builds on this security model</relationship>
    </story>

    <story>
      <id>6.3</id>
      <title>Session Metadata System</title>
      <relationship>Created manifest.json for sessions - good filename validation helps organize session outputs</relationship>
    </story>

    <story>
      <id>6.6</id>
      <title>File Reference Attachment UI</title>
      <relationship>Files with descriptive names are much easier to find and attach from the file viewer</relationship>
    </story>
  </related-stories>
</story-context>
