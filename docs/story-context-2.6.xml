<story-context id="story-2.6" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.6</storyId>
    <title>Conversation State Management</title>
    <status>Draft</status>
    <generatedAt>2025-10-03</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/bryan.inagaki/Documents/development/agent-orchestrator/docs/stories/story-2.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>end user</asA>
    <iWant>my conversation history to be maintained across multiple messages</iWant>
    <soThat>the agent has context from previous exchanges and can build on prior interactions</soThat>
    <tasks>
      <task ac="1,2">Create Conversation Manager (lib/utils/conversations.ts)</task>
      <task ac="4">Implement Input Validation (lib/utils/validation.ts)</task>
      <task ac="1,2,4">Update Chat API Route to use conversation manager</task>
      <task ac="3,5">Enhance Logging (lib/utils/logger.ts)</task>
      <task ac="1-6">Testing and Validation</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC-E2-12" priority="high">Conversations stored in memory with unique IDs</criterion>
    <criterion id="AC-E2-15" priority="high">File operation errors captured and logged</criterion>
    <criterion id="AC-E2-19" priority="high">Input validation for agentId, message, conversationId</criterion>
    <criterion id="AC-E2-20" priority="medium">Logging for all operations</criterion>
    <criterion id="2" priority="high">Conversation history maintained across multiple messages</criterion>
    <criterion id="6" priority="low">Conversation state lost on server restart (documented limitation)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-2.md</path>
        <title>Tech Spec Epic 2</title>
        <section>Story 2.6: Conversation State Management (lines 1222-1410)</section>
        <snippet>Complete implementation guidance for conversation state management including conversation manager, input validation, and structured logging utilities. Includes data models for Conversation and Message interfaces, validation patterns for agentId/message/conversationId, and in-memory Map storage approach.</snippet>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Epic 2 Story 2.6</section>
        <snippet>Conversation State Management - Implements stateful conversation tracking across multiple messages to enable natural multi-turn dialogue similar to ChatGPT/Claude. Foundation for future conversation persistence (database storage).</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>Description and Context</section>
        <snippet>Agent Orchestrator enables BMAD agents to be deployed with OpenAI API compatibility. End users interact through familiar ChatGPT-style chat interface requiring conversation state management for multi-turn interactions.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-2.5.md</path>
        <title>Story 2.5: Chat API Route</title>
        <section>Dev Notes - Architecture Alignment</section>
        <snippet>Story 2.5 implements basic chat API with single-message conversation (lines 43-44 note that full conversation state deferred to Story 2.6). Provides foundation for stateful conversation management.</snippet>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>app/api/chat/route.ts</path>
        <kind>api-route</kind>
        <symbol>POST</symbol>
        <lines>1-82</lines>
        <reason>Current chat API route handler - needs modification to use conversation manager instead of simple conversationId generation (lines 43-45). Will integrate getConversation(), addMessage(), and validation functions.</reason>
      </artifact>
      <artifact>
        <path>lib/openai/chat.ts</path>
        <kind>service</kind>
        <symbol>executeChatCompletion</symbol>
        <lines>1-50</lines>
        <reason>Chat service receives conversation messages array - needs update to accept full conversation history from conversation manager instead of single message.</reason>
      </artifact>
      <artifact>
        <path>lib/utils/errors.ts</path>
        <kind>utility</kind>
        <symbol>ValidationError, handleApiError</symbol>
        <lines>1-95</lines>
        <reason>Existing error handling utilities - ValidationError class will be used by validation functions. handleApiError already integrated in chat route for consistent error responses.</reason>
      </artifact>
      <artifact>
        <path>types/api.ts</path>
        <kind>type-definitions</kind>
        <symbol>ChatRequest, ChatResponse</symbol>
        <lines>17-41</lines>
        <reason>Existing type definitions for chat API - ChatRequest already includes optional conversationId field. ChatResponse includes message structure compatible with conversation manager.</reason>
      </artifact>
    </code>

    <dependencies>
      <framework>
        <name>Next.js</name>
        <version>14.2.0</version>
        <purpose>API Routes for HTTP endpoints</purpose>
      </framework>
      <package>
        <name>openai</name>
        <version>^4.104.0</version>
        <purpose>OpenAI API client for multi-turn conversations</purpose>
      </package>
      <package>
        <name>typescript</name>
        <version>^5</version>
        <purpose>Type safety for conversation state management</purpose>
      </package>
      <package>
        <name>Node.js crypto</name>
        <version>built-in</version>
        <purpose>UUID generation via crypto.randomUUID() for conversation and message IDs</purpose>
      </package>
      <testing>
        <name>jest</name>
        <version>^30.2.0</version>
        <purpose>Unit testing for conversation manager, validation, and logging utilities</purpose>
      </testing>
      <testing>
        <name>@testing-library/react</name>
        <version>^16.3.0</version>
        <purpose>Integration testing for updated chat API route</purpose>
      </testing>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="1">Use Map&lt;string, Conversation&gt; for in-memory conversation storage (MVP approach)</constraint>
    <constraint id="2">Generate conversation IDs using crypto.randomUUID() from Node.js crypto module</constraint>
    <constraint id="3">Generate message IDs using crypto.randomUUID() for each message</constraint>
    <constraint id="4">Track createdAt and updatedAt timestamps for conversations</constraint>
    <constraint id="5">Track timestamp for each message</constraint>
    <constraint id="6">Validation patterns: agentId /^[a-z0-9-]+$/, message max 10,000 chars, conversationId UUID v4 format</constraint>
    <constraint id="7">Throw ValidationError for invalid inputs with specific field and reason</constraint>
    <constraint id="8">Create new conversation when conversationId not found (graceful recovery, don't fail)</constraint>
    <constraint id="9">Log all operations with timestamps and context (INFO, ERROR, DEBUG levels)</constraint>
    <constraint id="10">DEBUG logs only in development environment (check NODE_ENV)</constraint>
    <constraint id="11">Log full error details (stack traces) server-side only, never expose to client</constraint>
    <constraint id="12">Conversation state lost on server restart (documented MVP limitation)</constraint>
    <constraint id="13">No conversation cleanup/expiration in MVP (acceptable for initial deployment)</constraint>
    <constraint id="14">Single-server instance only (no multi-server support in MVP)</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>getConversation</name>
      <kind>function</kind>
      <signature>getConversation(conversationId: string | undefined, agentId: string): Conversation</signature>
      <path>lib/utils/conversations.ts</path>
      <description>Retrieves existing conversation by ID or creates new conversation. Returns Conversation object with id, agentId, messages array, createdAt, updatedAt.</description>
    </interface>
    <interface>
      <name>addMessage</name>
      <kind>function</kind>
      <signature>addMessage(conversationId: string, message: Omit&lt;Message, 'id' | 'timestamp'&gt;): Message</signature>
      <path>lib/utils/conversations.ts</path>
      <description>Appends message to conversation history and updates conversation timestamp. Generates message ID and timestamp. Throws error if conversation not found.</description>
    </interface>
    <interface>
      <name>getConversationHistory</name>
      <kind>function</kind>
      <signature>getConversationHistory(conversationId: string): Message[]</signature>
      <path>lib/utils/conversations.ts</path>
      <description>Returns message array for a conversation. Returns empty array if conversation not found.</description>
    </interface>
    <interface>
      <name>clearAllConversations</name>
      <kind>function</kind>
      <signature>clearAllConversations(): void</signature>
      <path>lib/utils/conversations.ts</path>
      <description>Clears all conversations from memory. Utility for testing and cache management.</description>
    </interface>
    <interface>
      <name>validateAgentId</name>
      <kind>function</kind>
      <signature>validateAgentId(agentId: string): void</signature>
      <path>lib/utils/validation.ts</path>
      <description>Validates agentId matches format /^[a-z0-9-]+$/ (lowercase alphanumeric with hyphens). Throws ValidationError if invalid.</description>
    </interface>
    <interface>
      <name>validateMessage</name>
      <kind>function</kind>
      <signature>validateMessage(message: string): void</signature>
      <path>lib/utils/validation.ts</path>
      <description>Validates message is non-empty and under 10,000 character limit. Throws ValidationError if invalid.</description>
    </interface>
    <interface>
      <name>validateConversationId</name>
      <kind>function</kind>
      <signature>validateConversationId(conversationId: string | undefined): void</signature>
      <path>lib/utils/validation.ts</path>
      <description>Validates conversationId is valid UUID v4 format if provided (optional). Throws ValidationError if provided and invalid format.</description>
    </interface>
    <interface>
      <name>log</name>
      <kind>function</kind>
      <signature>log(level: 'INFO' | 'ERROR' | 'DEBUG', operation: string, data: any): void</signature>
      <path>lib/utils/logger.ts</path>
      <description>Structured logging with log levels. Includes timestamp and operation context. DEBUG only logs in development. Errors include full details server-side.</description>
    </interface>
    <interface>
      <name>Conversation</name>
      <kind>type</kind>
      <signature>interface Conversation { id: string; agentId: string; messages: Message[]; createdAt: Date; updatedAt: Date; }</signature>
      <path>types/index.ts</path>
      <description>Conversation data model. Existing type definition from Story 2.5 - verify structure matches requirements.</description>
    </interface>
    <interface>
      <name>Message</name>
      <kind>type</kind>
      <signature>interface Message { id: string; role: 'user' | 'assistant' | 'system'; content: string; timestamp: Date; functionCalls?: FunctionCall[]; }</signature>
      <path>types/index.ts</path>
      <description>Message data model. Existing type definition from Story 2.5 - verify structure matches requirements.</description>
    </interface>
    <interface>
      <name>ValidationError</name>
      <kind>class</kind>
      <signature>class ValidationError extends AppError</signature>
      <path>lib/utils/errors.ts</path>
      <description>Existing error class for validation failures. Returns HTTP 400. Use in validation functions.</description>
    </interface>
    <interface>
      <name>executeChatCompletion</name>
      <kind>function</kind>
      <signature>executeChatCompletion(agent: Agent, messages: ChatCompletionMessageParam[]): Promise&lt;ChatCompletionResult&gt;</signature>
      <path>lib/openai/chat.ts</path>
      <description>Existing chat service from Story 2.5. Will receive full conversation message history instead of single message.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing follows Jest 30.2.0 framework with unit tests in __tests__ directories. Existing patterns from Epic 2: comprehensive mocking, isolation with beforeEach cleanup, describe/it structure, Arrange-Act-Assert pattern. Coverage target: 70%+ for /lib modules. Mock external dependencies (conversation storage, crypto.randomUUID). Test error paths and edge cases. Integration tests for API route cover validation, error handling, and conversation flow.
    </standards>

    <locations>
      lib/utils/__tests__/conversations.test.ts
      lib/utils/__tests__/validation.test.ts
      lib/utils/__tests__/logger.test.ts
      app/api/chat/__tests__/route.test.ts (update existing tests)
    </locations>

    <ideas>
      <test ac="AC-E2-12,2">Multi-turn conversation maintains history - verify getConversation returns same conversation, messages array grows with each addMessage call</test>
      <test ac="AC-E2-12">New conversation creation - verify new conversationId generated when not provided or not found</test>
      <test ac="AC-E2-12">Conversation retrieval - verify existing conversation returned when valid conversationId provided</test>
      <test ac="AC-E2-19">AgentId validation - test valid lowercase-with-hyphens passes, UPPERCASE fails, special chars fail</test>
      <test ac="AC-E2-19">Message validation - test empty string fails, 10,001 chars fails, normal message passes</test>
      <test ac="AC-E2-19">ConversationId validation - test valid UUID passes, invalid UUID fails, undefined passes (optional)</test>
      <test ac="AC-E2-15">File operation errors logged - verify errors from file operations captured in conversation flow and logged with full context</test>
      <test ac="AC-E2-20">All operations logged - verify conversation creation, message addition, validation failures all produce log entries</test>
      <test ac="6">Server restart clears state - manual test: restart server, verify previous conversationId returns 404 or creates new conversation</test>
      <test ac="2">OpenAI receives full history - verify executeChatCompletion receives messages array with all previous messages from conversation</test>
      <test ac="1">Conversation ID format - verify crypto.randomUUID() produces valid UUIDs for conversation and message IDs</test>
      <test ac="1">Conversation timestamps - verify createdAt set on creation, updatedAt changes with each addMessage</test>
    </ideas>
  </tests>
</story-context>
