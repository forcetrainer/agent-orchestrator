<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>3</storyId>
    <title>Environment Configuration</title>
    <status>Draft</status>
    <generatedAt>2025-10-02</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/bryan.inagaki/Documents/development/agent-orchestrator/docs/stories/story-1.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>environment variable configuration</iWant>
    <soThat>I can manage secrets and configuration separately from code</soThat>
    <tasks>
      <task id="1" status="pending">Create environment variable template files (AC: 1, 2)</task>
      <task id="2" status="pending">Define environment variables (AC: 3, 4, 5)</task>
      <task id="3" status="pending">Create environment validation utility (AC: 6, 7)</task>
      <task id="4" status="pending">Integrate validation on startup (AC: 7)</task>
      <task id="5" status="pending">Test environment configuration (AC: 6, 7)</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">.env.local file created for local development</criterion>
    <criterion id="2">.env.example file created as template</criterion>
    <criterion id="3">OPENAI_API_KEY variable defined</criterion>
    <criterion id="4">AGENTS_FOLDER_PATH variable with default value</criterion>
    <criterion id="5">OUTPUT_FOLDER_PATH variable with default value</criterion>
    <criterion id="6">Environment variables accessible in API routes</criterion>
    <criterion id="7">Validation on startup for required variables</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Tech Spec: Epic 1 - Backend Foundation" section="Story 1.3: Environment Configuration">
        <snippet>Provides complete implementation steps for creating .env.example and .env.local files with documented variables (OPENAI_API_KEY, AGENTS_PATH, OUTPUT_PATH, PORT, NODE_ENV). Includes environment validation utility structure with validateEnv() function and env object with typed getters. Specifies validation should run in app/layout.tsx server-side only.</snippet>
      </doc>
      <doc path="docs/epics.md" title="Agent Orchestrator - Epic Breakdown" section="Story 1.3: Environment Configuration">
        <snippet>Defines story acceptance criteria and technical notes. Specifies Next.js built-in environment variable support should be used, with server-only variables (not prefixed with NEXT_PUBLIC_). Emphasizes utility function to validate env vars on startup and document all variables in .env.example.</snippet>
      </doc>
      <doc path="docs/solution-architecture.md" title="Solution Architecture Document" section="1.1 Technology and Library Decision Table">
        <snippet>Next.js 14.2.0 framework with built-in environment variable support. Node.js 20 LTS runtime. Design philosophy: minimal dependencies, use Next.js and Node.js built-ins wherever possible. No cloud services or external configuration management needed.</snippet>
      </doc>
      <doc path="docs/PRD.md" title="Product Requirements Document" section="Security Requirements">
        <snippet>OPENAI_API_KEY must be stored securely and never committed to version control. Environment variables should support flexible deployment (local dev, Docker, cloud). Clear validation and error messages when configuration is invalid.</snippet>
      </doc>
    </docs>
    <code>
      <artifact path="app/layout.tsx" kind="component" symbol="RootLayout" lines="12-22" reason="Server-side layout component where environment validation should be integrated on startup">
        <snippet>export default function RootLayout({ children }: Readonly&lt;{ children: React.ReactNode }&gt;) {
  return (
    &lt;html lang="en"&gt;
      &lt;body className={inter.className}&gt;{children}&lt;/body&gt;
    &lt;/html&gt;
  );
}</snippet>
      </artifact>
      <artifact path="types/api.ts" kind="types" symbol="ApiResponse" lines="1-57" reason="Existing type definitions pattern to follow for consistent TypeScript usage across the application">
        <snippet>TypeScript interface patterns already established in project. Uses JSDoc comments for documentation. Export interfaces for reuse across modules.</snippet>
      </artifact>
      <artifact path="app/api/chat/route.ts" kind="route" symbol="POST" lines="1-74" reason="Example API route that will need to access environment variables (future OPENAI_API_KEY usage in Epic 2)">
        <snippet>Shows Next.js API route pattern with NextRequest/NextResponse. Demonstrates error handling and validation patterns already established in project.</snippet>
      </artifact>
      <artifact path="package.json" kind="config" symbol="dependencies" lines="11-26" reason="Current project dependencies - confirms Next.js 14.2.0, TypeScript 5, and Node 20 environment">
        <snippet>Next.js 14.2.0, TypeScript ^5, @types/node ^20. No environment configuration libraries needed - using Next.js built-in support.</snippet>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="next" version="14.2.0">Built-in environment variable support via process.env</package>
        <package name="typescript" version="^5">Type definitions for environment validation utility</package>
        <package name="@types/node" version="^20">Node.js type definitions including process.env</package>
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="security" priority="critical">
      .env.local MUST be in .gitignore to prevent OPENAI_API_KEY from being committed to version control. Only .env.example should be tracked in git with placeholder values.
    </constraint>
    <constraint type="architecture" priority="high">
      Use Next.js built-in environment variable support (process.env). No external libraries like dotenv needed. Variables are automatically loaded from .env.local during development.
    </constraint>
    <constraint type="validation" priority="high">
      Environment validation must run at server startup (not build time). Use 'typeof window === undefined' check to ensure validation only runs server-side. Application should fail fast with clear error message if OPENAI_API_KEY is missing.
    </constraint>
    <constraint type="naming" priority="medium">
      Follow Next.js conventions: server-only variables do NOT need NEXT_PUBLIC_ prefix. Use descriptive names: OPENAI_API_KEY, AGENTS_PATH, OUTPUT_PATH (not FOLDER, PATH more standard).
    </constraint>
    <constraint type="defaults" priority="medium">
      Optional environment variables must have sensible defaults. AGENTS_PATH defaults to ./agents, OUTPUT_PATH defaults to ./output, PORT defaults to 3000. Only OPENAI_API_KEY is strictly required.
    </constraint>
    <constraint type="file-structure" priority="medium">
      Create lib/utils/ directory structure following existing project organization pattern. Export both validateEnv function and env object from lib/utils/env.ts for reuse.
    </constraint>
  </constraints>

  <interfaces>
    <interface name="validateEnv" kind="function" signature="validateEnv(): void" path="lib/utils/env.ts">
      Validates required environment variables are present. Throws Error with clear message listing missing variables if validation fails. Should be called at server startup in app/layout.tsx.
    </interface>
    <interface name="env" kind="object" signature="const env: { OPENAI_API_KEY: string; AGENTS_PATH: string; OUTPUT_PATH: string; PORT: number; NODE_ENV: string }" path="lib/utils/env.ts">
      Typed environment variable accessor object. Provides type-safe access to environment variables with defaults applied. All consuming code should import from this object rather than accessing process.env directly.
    </interface>
  </interfaces>

  <tests>
    <standards>
      Epic 1 focuses on foundational setup. Unit tests for environment validation are optional for MVP but recommended. Manual testing is sufficient: verify app starts successfully with valid .env.local, verify app fails with clear error when OPENAI_API_KEY is missing, verify defaults work for optional variables. Integration tests can be added in Epic 6 (Polish phase).
    </standards>
    <locations>
      If unit tests are created, place them in: lib/utils/__tests__/env.test.ts following Next.js testing conventions.
    </locations>
    <ideas>
      <idea acId="7">Test validateEnv throws error when OPENAI_API_KEY is missing from environment</idea>
      <idea acId="7">Test validateEnv succeeds when all required variables are present</idea>
      <idea acId="4,5">Test env object returns default values for AGENTS_PATH, OUTPUT_PATH when not set</idea>
      <idea acId="6">Test env object is accessible from API route handlers (integration test)</idea>
      <idea acId="1,2">Verify .env.local is in .gitignore and not tracked by git</idea>
    </ideas>
  </tests>
</story-context>
